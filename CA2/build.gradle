plugins {
    // Apply the application plugin to add support for building a Java application
    id 'application'
}

// Configure Java toolchain
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) 
    }
}

application{
    mainClass = 'basic_demo.App'
}

description = "A trivial Gradle build"
version = "0.1.0"

repositories {
    mavenCentral()
}

dependencies {
    // Use Apache Log4J for logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
    testImplementation ('org.junit.jupiter:junit-jupiter:5.7.0')
}
 
jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates

    manifest {
        attributes "Main-Class": "basic_demo.App"
    }

   from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


task runClient(type:JavaExec, dependsOn: classes){
    group = "DevOps"
    description = "Launches a chat client that connects to a server on localhost:59001 "
  
    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'basic_demo.ChatClientApp'

    args 'localhost', '59001'
}

task runServer(type:JavaExec, dependsOn: classes){
    group = "DevOps"
    description = "Launches a chat server that connects to a server on localhost:59001 "

    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'basic_demo.ChatServerApp'

    args 'localhost', '59001'
}

task backupSources(type: Copy) {
    group = "Backup"
    description = "Copies the contents of src to backup folder"
    from 'src'
    into 'backup'
}

test {
    useJUnitPlatform()
    systemProperty 'java.awt.headless', 'false'
}

task zipBackup(type: Zip, dependsOn: backupSources) {
    group = 'Backup'
    description = 'Creates a timestamped ZIP archive of the backup folder'

    from 'backup'
    archiveFileName = "backup.zip"
    destinationDirectory = file("/archives")

}

task javadocZip(type: Zip) {
    group = 'Documentation'
    description = 'Generates Javadoc and packages it into a ZIP file.'

    dependsOn javadoc

    from javadoc.destinationDir
    archiveBaseName = 'project-javadoc'
    archiveVersion = version
    destinationDirectory = file("/distributions")
}


